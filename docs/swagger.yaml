definitions:
  models.AuthRequestDTO:
    properties:
      allows_write_to_pm:
        type: boolean
      auth_date:
        type: integer
      first_name:
        type: string
      is_premium:
        type: boolean
      language_code:
        type: string
      last_name:
        type: string
      photo_url:
        type: string
      username:
        type: string
    type: object
  models.InitDataRequest:
    properties:
      initData:
        type: string
    required:
    - initData
    type: object
  models.Profile:
    properties:
      age:
        type: integer
      app_language:
        type: string
      city:
        type: string
      country:
        type: string
      foot:
        type: string
      games_played:
        type: integer
      height:
        type: integer
      id:
        type: integer
      playing_frequency:
        type: integer
      pref_position:
        type: string
      user_id:
        type: integer
    type: object
  models.ProfileCreateFirstDTO:
    properties:
      app_language:
        type: string
      city:
        type: string
      country:
        type: string
    type: object
  models.ProfileCreateRequest:
    properties:
      age:
        type: integer
      city:
        type: string
      country:
        type: string
      foot:
        type: string
      height:
        type: integer
      pref_position:
        type: string
      user_id:
        type: integer
    type: object
  models.ProfileCreateSecondDTO:
    properties:
      age:
        type: integer
      foot:
        type: string
      height:
        type: integer
      pref_position:
        type: string
    type: object
  models.Team:
    properties:
      description:
        type: string
      id:
        type: integer
      photo:
        type: string
      playing_in:
        format: date-time
        type: string
      stadium:
        type: string
      team_name:
        type: string
    type: object
  models.TeamCreateRequest:
    properties:
      description:
        type: string
      photo:
        type: string
      playing_in:
        format: date-time
        type: string
      stadium:
        type: string
      team_name:
        type: string
    type: object
  models.TeamWithCount:
    properties:
      name:
        type: string
      players_count:
        type: integer
    type: object
  models.User:
    properties:
      allows_write_to_pm:
        type: boolean
      auth_date:
        type: integer
      first_name:
        type: string
      id:
        type: integer
      is_premium:
        type: boolean
      language_code:
        type: string
      last_name:
        type: string
      photo_url:
        type: string
      profile:
        $ref: '#/definitions/models.Profile'
      profile_id:
        type: integer
      team:
        $ref: '#/definitions/models.Team'
      team_id:
        type: integer
      tg_userid:
        type: integer
      username:
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      allows_write_to_pm:
        type: boolean
      first_name:
        type: string
      language_code:
        type: string
      last_name:
        type: string
      photo_url:
        type: string
      profile_create_request:
        $ref: '#/definitions/models.ProfileCreateRequest'
      username:
        type: string
    required:
    - first_name
    - language_code
    - last_name
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for my Go project
  title: My API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Принимает строку initData и создает нового пользователя, если он
        еще не зарегистрирован
      parameters:
      - description: InitData от Telegram
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.InitDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь уже зарегистрирован
          schema:
            additionalProperties: true
            type: object
        "201":
          description: Пользователь успешно авторизован (создан)
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверные данные запроса или ошибка парсинга
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Внутренняя ошибка сервера (БД, транзакция и т.п.)
          schema:
            additionalProperties: true
            type: object
      summary: Авторизация по initData
      tags:
      - Авторизация
  /auth/users:
    get:
      description: Возвращает всех пользователей из таблицы "user".
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить список пользователей
      tags:
      - Авторизация
  /profiles:
    get:
      consumes:
      - application/json
      description: Возвращает массив профилей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Profile'
            type: array
      summary: Получить список профилей
      tags:
      - Профили
  /profiles/by-tg/{tg_userid}/profile:
    post:
      consumes:
      - application/json
      description: Добавляет запись в таблицу profiles и обновляет поле profile_id
        у пользователя
      parameters:
      - description: Telegram ID пользователя
        in: path
        name: tg_userid
        required: true
        type: integer
      - description: Данные профиля
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ProfileCreateFirstDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Профиль успешно создан и привязан
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный ввод
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создание профиля и привязка к пользователю
      tags:
      - Профили
  /profiles/second/{tg_userid}/profile:
    post:
      consumes:
      - application/json
      description: Обновляет поля age, pref_position, foot и height в таблице profiles
        по tg_user_id
      parameters:
      - description: Telegram user ID
        in: path
        name: tg_userid
        required: true
        type: string
      - description: Данные профиля
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ProfileCreateSecondDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Профиль успешно обновлён
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат входных данных
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка на сервере
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление второй части профиля пользователя
      tags:
      - Профили
  /teams:
    get:
      consumes:
      - application/json
      description: Возвращает массив команд
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Team'
            type: array
      summary: Получить список команд
      tags:
      - Команды
    post:
      consumes:
      - application/json
      description: Добавляет новую команду в систему
      parameters:
      - description: Данные команды
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TeamCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Team'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создать команду
      tags:
      - Команды
  /teams/players/count/{team_name}:
    get:
      description: Возвращает количество игроков в команде по имени. Если команд с
        таким именем несколько, вернёт массив.
      parameters:
      - description: Название команды
        in: path
        name: team_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TeamWithCount'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить количество игроков в команде
      tags:
      - Пользователь и команды
  /users:
    get:
      consumes:
      - application/json
      description: Возвращает массив пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Получить список пользователей
      tags:
      - Пользователи
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и профиль для него в одном запросе
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверные данные запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Не удалось создать пользователя
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создать пользователя с профилем
      tags:
      - Пользователи
  /users/{user_id}/team:
    delete:
      consumes:
      - application/json
      description: Убирает пользователя из команды, устанавливая team_id в NULL
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь покинул команду
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Недопустимые параметры запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Не удалось покинуть команду
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Выход пользователя из команды
      tags:
      - Пользователь и команды
  /users/{user_id}/team/{team_id}:
    post:
      consumes:
      - application/json
      description: Добавляет пользователя в команду по ID команды и ID пользователя
      parameters:
      - description: ID команды
        in: path
        name: team_id
        required: true
        type: integer
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь присоединен к команде
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Недопустимые параметры запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Не удалось присоединиться к команде
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Присоединение пользователя к команде
      tags:
      - Пользователь и команды
  /users/team/{team_id}:
    get:
      description: Возвращает список пользователей, принадлежащих к команде с указанным
        ID
      parameters:
      - description: ID команды
        in: path
        name: team_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AuthRequestDTO'
            type: array
        "500":
          description: Ошибка при выполнении запроса или сканировании
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение пользователей по ID команды
      tags:
      - Пользователь и команды
swagger: "2.0"
